Variables y operaciones
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
¬øQu√© es una variable y para qu√© sirve?
Una variable es un espacio de memoria donde podemos guardar un valor/valores.
¬øCu√°l es la diferencia entre declarar e inicializar una variable?
Declarar una variable reservamos el espacio de la variable solamente. Al inicializarla le damos el valor a guardar.
¬øCu√°l es la diferencia entre sumar n√∫meros y concatenar strings?
Cuando sumamos numeros, estamos haciendo una operacion matematica con dos valores de tipo number. Al concatenar string estamos uniendo dos valores de tipo string en uno solo.
¬øCu√°l operador me permite sumar o concatenar?
Con el operador +.

2Ô∏è‚É£ Determina el nombre y tipo de dato para almacenar en variables la siguiente informaci√≥n:
Nombre -> String
Apellido -> String
Nombre de usuario en Platzi -> String
Edad-> Number
Correo electr√≥nico -> String
Mayor de edad -> Boolean
Dinero ahorrado -> Number
Deudas-> Number

3Ô∏è‚É£ Traduce a c√≥digo JavaScript las variables del ejemplo anterior y deja tu c√≥digo en los comentarios.
let name = "Anny";
let lastName = "Cabrera";
let username = "annyring";
let age = 23;
let email = "ancabrerany@gmail.com";
let adult = true;
let savings = 2000;
let debt = 500;

4Ô∏è‚É£ Calcula e imprime las siguientes variables a partir de las variables del ejemplo anterior:
Nombre completo (nombre y apellido)
let name = "Anny";
let lastName = "Cabrera";
console.log(`Mi nombre completo es: ${name} ${lastName});

Dinero real (dinero ahorrado menos deudas)
let savings = 2000;
let debt = 500;
let money = savings - debt;
console.log(`Dinero actual: ${money});

Funciones
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
¬øQu√© es una funci√≥n?
Una funcion es un bloque de codigo que soluciona un problema en especifico y que pueden ser reutilizados. 
¬øCu√°ndo me sirve usar una funci√≥n en mi c√≥digo?
En situaciones donde necesitamos reutilizar una accion multiples veces. 
¬øCu√°l es la diferencia entre par√°metros y argumentos de una funci√≥n?
Los parametros son los espacios de memoria que ocuparan los valores cuando usemos nuestra funcion. Los argumentos de una funcion son los valores dados cuando usamos la funcion.

2Ô∏è‚É£ Convierte el siguiente c√≥digo en una funci√≥n, pero, cambiando cuando sea necesario las variables constantes por par√°metros y argumentos en una funci√≥n:
const name = "Juan David";
const lastname = "Castro Gallego";
const completeName = name + lastname;
const nickname = "juandc";
console.log("Mi nombre es " + completeName + ", pero prefiero que me digas " + nickname + ".");

function myName(name, lastName, nickname){
 return console.log(`Mi nombre es ${name} ${lastName}, pero prefiero que me digas ${nickname}.`);
}

Condicionales
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
¬øQu√© es un condicional?
Es una expresion donde se evalua un si algo es verdadero o falso.
¬øQu√© tipos de condicionales existen en JavaScript y cu√°les son sus diferencias?
-if/else: se evaluan varias expresiones mediante se evalua el caso, usando else o else if dependiendo del caso.
-switch: se toma solo una expresion en especifico y se evaluan los casos como posibles respuestas a la expresion y ejecutando su codigo correspondiente.
¬øPuedo combinar funciones y condicionales?
Si, una funcion puede tener condicionales, codigos dentro de esas condicionales que se puede ejecutar dependiendo de la expresion, podiendo llamar a otra condicional o otra funcion.

2Ô∏è‚É£ Replica el comportamiento del siguiente c√≥digo que usa la sentencia switch utilizando if, else y else if:
const tipoDeSuscripcion = "Basic";

switch (tipoDeSuscripcion) {
   case "Free":
       console.log("Solo puedes tomar los cursos gratis");
       break;
   case "Basic":
       console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
       break;
   case "Expert":
       console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
       break;
   case "ExpertPlus":
       console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
       break;
}

const tipoDeSuscripcion = "Basic";
if (tipoDeSuscripcion == "Free"){
 console.log("Solo puedes tomar los cursos gratis");
}  else if  (tipoDeSuscripcion == "Basic"){
       console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
} else if  (tipoDeSuscripcion == "Expert"){
       console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
} else if  (tipoDeSuscripcion == "ExpertPlus"){
       console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
}

3Ô∏è‚É£ Replica el comportamiento de tu condicional anterior con if, else y else if, pero ahora solo con if (sin else ni else if).
üí° Bonus: si ya eres una experta o experto en el lenguaje, te desaf√≠o a comentar c√≥mo replicar este comportamiento con arrays u objetos y un solo condicional. üòè
const tipoDeSuscripcion = "Basic";
let subscriptions = [{name: "Free", message: "Solo puedes tomar los cursos gratis"}, 
                     {name: "Basic", message: "Puedes tomar casi todos los cursos de Platzi durante un mes"},
                     {name: "Expert", message: "Puedes tomar casi todos los cursos de Platzi durante un a√±o"},
                     {name: "ExpertPlus", message: "T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o"}];

for(let count = 0; count <= subscriptions.length; count++ ){
    if(tipoDeSuscripcion === subscriptions[count].name){
      return console.log(subscriptions[count].message);
    }
 }
 

Ciclos
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
¬øQu√© es un ciclo?
Es una estructura de codigo que realiza una o varias instrucciones mientras una condicion sea verdadera.
¬øQu√© tipos de ciclos existen en JavaScript?
-For
-While
¬øQu√© es un ciclo infinito y por qu√© es un problema?
Un ciclo infinito es cuando una condicion es infinita y no hay codigo que se ejecuta que cambie el estado de ella. El codigo falla y satura la memoria.
¬øPuedo mezclar ciclos y condicionales?
Si se pueden mezclar.

2Ô∏è‚É£ Replica el comportamiento de los siguientes ciclos for utilizando ciclos while:
for (let i = 0; i < 5; i++) {
    console.log("El valor de i es: " + i);
}
let i = 0;
while (i < 5){
   console.log("El valor de i es: " + i);
  i++;
}

for (let i = 10; i >= 2; i--) {
    console.log("El valor de i es: " + i);
}
let i = 10;
while(i >=2){
    console.log("El valor de i es: " + i);
    i--;
}

3Ô∏è‚É£ Escribe un c√≥digo en JavaScript que le pregunte a los usuarios cu√°nto es 2 + 2. Si responden bien, mostramos un mensaje de felicitaciones, pero si responden mal, volvemos a empezar.
üí° Pista: puedes usar la funci√≥n prompt de JavaScript.
function addition (){
  let respuesta = parseInt(prompt('Escribe el resultado de 2 + 2: '));
  if (respuesta == 4){
    console.log("Felicidades. Tu respuesta es correcta. ");
  }
  else {
    console.log("Lo sentimos. Tu respuesta es incorrecta. ");
  }
}

Listas
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
¬øQu√© es un array?
Un array es un tipo de dato estructurado que almacena datos, del mismo tipo y relacionados. Se accede a estos datos a travez del indice, indicando la posicion en dicha estructura.
¬øQu√© es un objeto?
Un objeto es una unidad dentro del codigo, que tiene un estado y comportamiento. Permite almacar un grupo de datos de diversos tipos pero que estan asociados a dicha entidad. 
¬øCu√°ndo es mejor usar objetos o arrays?
Dependiendo del problema o valor que queramos expresar en nuestro codigo. Cada estructura tiene sus ventajas y desventajas.
¬øPuedo mezclar arrays con objetos o incluso objetos con arrays?
Si, se pueden usar arrays dentro de u objeto, o un objeto dentro de un array.

2Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima su primer elemento.
function propmtElement (arrayExample){
  return console.log(arrayExample[0]);
}

3Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima todos sus elementos uno por uno (no se vale imprimir el array completo).
function propmtElement (arrayExample){
  for(var element of arrayExample){
  return console.log(element);
  }
}

4Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier objeto como par√°metro e imprima todos sus elementos uno por uno (no se vale imprimir el objeto completo).
function propmtProperty (objectExample){
  for(var element in arrayExample){
  return console.log(element);
  }
}